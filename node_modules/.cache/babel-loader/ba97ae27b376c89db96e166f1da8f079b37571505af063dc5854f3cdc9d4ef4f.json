{"ast":null,"code":"var _jsxFileName = \"/home/michael-soa/Downloads/kanban-app/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { Header } from \"./components/Header\";\nimport Draggable from 'react-draggable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n  const [board, setBoard] = useState([]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.boardContainer,\n      children: board.map(list => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          id: `list_${list.id}`,\n          className: \"list-container\",\n          style: styles.listContainer,\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: list.title\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 15,\n            columnNumber: 8\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            style: styles.newCard,\n            onClick: () => {\n              let temp_boards = [...board];\n              for (let i = 0; i < temp_boards.length; i++) {\n                if (temp_boards[i].id === list.id) {\n                  temp_boards[i].cards.push({\n                    id: new Date().getTime(),\n                    title: 'New Card',\n                    description: 'New Card Description'\n                  });\n                }\n              }\n              setBoard(temp_boards);\n            },\n            children: \"+ New Card\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 8\n          }, this), list.cards.map(card => {\n            return /*#__PURE__*/_jsxDEV(Draggable, {\n              onStop: e => {\n                let allLists = document.querySelectorAll('.list-container');\n                for (let i = 0; i < allLists.length; i++) {\n                  let list = allLists[i];\n                  let rect = list.getBoundingClientRect();\n                  let data = {\n                    x: e.clientX,\n                    y: e.clientY\n                  };\n                  let flag = false;\n                  if (data.x > rect.left && data.x < rect.right && data.y > rect.top && data.y < rect.bottom) {\n                    let final_list_id = list.id.split('_')[1];\n                    let final_card_id = card.id;\n                    let temp_boards = [...board];\n                    for (let boardIndex = 0; boardIndex < temp_boards.length; boardIndex++) {\n                      for (let cardIndex = 0; cardIndex < temp_boards[boardIndex].cards.length; cardIndex++) {\n                        if (temp_boards[boardIndex].cards[cardIndex].id === final_card_id) {\n                          temp_boards[boardIndex].cards.splice(cardIndex, 1);\n                        }\n                      }\n                    }\n                    for (let boardIndex = 0; boardIndex < temp_boards.length; boardIndex++) {\n                      if (temp_boards[boardIndex].id === parseInt(final_list_id)) {\n                        temp_boards[boardIndex].cards.push(card);\n                      }\n                    }\n                    flag = true;\n                    setBoard(temp_boards);\n                  }\n                }\n              },\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                style: styles.cardContainer,\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  style: styles.title,\n                  value: card.title,\n                  onChange: e => {\n                    let temp_boards = [...board];\n                    for (let i = 0; i < temp_boards.length; i++) {\n                      for (let j = 0; j < temp_boards[i].cards.length; j++) {\n                        if (temp_boards[i].cards[j].id === card.id) {\n                          temp_boards[i].cards[j].title = e.target.value;\n                        }\n                      }\n                    }\n                    setBoard(temp_boards);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 69,\n                  columnNumber: 12\n                }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  style: styles.description,\n                  value: card.description,\n                  onChange: e => {\n                    let temp_boards = [...board];\n                    for (let i = 0; i < temp_boards.length; i++) {\n                      for (let j = 0; j < temp_boards[i].cards.length; j++) {\n                        if (temp_boards[i].cards[j].id === card.id) {\n                          temp_boards[i].cards[j].description = e.target.value;\n                        }\n                      }\n                    }\n                    setBoard(temp_boards);\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 12\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 68,\n                columnNumber: 11\n              }, this)\n            }, card.id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 10\n            }, this);\n          })]\n        }, list.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 7\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 3\n  }, this);\n}\n_s(App, \"TDIF6ESD0U4AdfAJN9S3iTjCS38=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Header","Draggable","jsxDEV","_jsxDEV","App","_s","board","setBoard","children","fileName","_jsxFileName","lineNumber","columnNumber","style","styles","boardContainer","map","list","id","className","listContainer","title","newCard","onClick","temp_boards","i","length","cards","push","Date","getTime","description","card","onStop","e","allLists","document","querySelectorAll","rect","getBoundingClientRect","data","x","clientX","y","clientY","flag","left","right","top","bottom","final_list_id","split","final_card_id","boardIndex","cardIndex","splice","parseInt","cardContainer","type","value","onChange","j","target","_c","$RefreshReg$"],"sources":["/home/michael-soa/Downloads/kanban-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { Header } from \"./components/Header\";\nimport Draggable from 'react-draggable';\nexport default function App() {\n\nconst [board, setBoard] = useState([])\n\nreturn (\n  <div>\n   <Header />\n   <div style={styles.boardContainer}>\n    {board.map((list) => {\n     return (\n      <div id={`list_${list.id}`} key={list.id} className=\"list-container\" style={styles.listContainer}>\n       <h2>{list.title}</h2>\n       <button\n        style={styles.newCard}\n        onClick={() => {\n         let temp_boards = [...board]\n         for (let i = 0; i < temp_boards.length; i++) {\n          if (temp_boards[i].id === list.id) {\n           temp_boards[i].cards.push({\n            id: new Date().getTime(),\n            title: 'New Card',\n            description: 'New Card Description'\n           })\n          }\n         }\n         setBoard(temp_boards)\n        }}\n       >+ New Card</button>\n       {list.cards.map((card) => {\n        return (\n         <Draggable\n          key={card.id}\n          onStop={(e,) => {\n let allLists = document.querySelectorAll('.list-container');\n           for (let i = 0; i < allLists.length; i++) {\n            let list = allLists[i];\n            let rect = list.getBoundingClientRect();\n            let data = {\n             x: e.clientX,\n             y: e.clientY\n            }\n            let flag = false\n            if (data.x > rect.left && data.x < rect.right && data.y > rect.top && data.y < rect.bottom) {\n             let final_list_id = list.id.split('_')[1];\n             let final_card_id = card.id;\n             let temp_boards = [...board]\n             for (let boardIndex = 0; boardIndex < temp_boards.length; boardIndex++) {\n              for (let cardIndex = 0; cardIndex < temp_boards[boardIndex].cards.length; cardIndex++) {\n               if (temp_boards[boardIndex].cards[cardIndex].id === final_card_id) {\n                temp_boards[boardIndex].cards.splice(cardIndex, 1)\n               }\n              }\n             }\n             for (let boardIndex = 0; boardIndex < temp_boards.length; boardIndex++) {\n              if (temp_boards[boardIndex].id === parseInt(final_list_id)) {\n               temp_boards[boardIndex].cards.push(card)\n              }\n             }\n             flag = true\n             setBoard(temp_boards)\n            }\n           }           \n          }}\n         >\n          <div style={styles.cardContainer}>\n           <input type={\"text\"} style={styles.title} value={card.title}\n            onChange={(e) => {\n let temp_boards = [...board]\n            for (let i = 0; i < temp_boards.length; i++) {\n              for (let j = 0; j < temp_boards[i].cards.length; j++) {\n               if (temp_boards[i].cards[j].id === card.id) {\n                temp_boards[i].cards[j].title = e.target.value\n               }\n              }\n             }\n             setBoard(temp_boards)             \n            }}\n           />\n           <input type={\"text\"} style={styles.description} value={card.description}\n            onChange={(e) => {\n              let temp_boards = [...board]\n            for (let i = 0; i < temp_boards.length; i++) {\n              for (let j = 0; j < temp_boards[i].cards.length; j++) {\n               if (temp_boards[i].cards[j].id === card.id) {\n                temp_boards[i].cards[j].description = e.target.value\n               }\n              }\n             }\n             setBoard(temp_boards)\n\n            }}\n           />\n          </div>\n         </Draggable>\n        )\n       })}\n      </div>\n     )\n    })}\n   </div>\n  </div>\n );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}